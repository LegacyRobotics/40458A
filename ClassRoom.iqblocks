{"mode":"Blocks","workspace":"<xml xmlns=\"http://www.w3.org/1999/xhtml\"><variables><variable type=\"\" id=\"_2.^beQjx|FGt38A,8(E\" islocal=\"false\" iscloud=\"false\" arraylength=\"0\" arraywidth=\"0\">myVariable</variable></variables><block type=\"iq_events_when_started\" id=\".NsXwU_L.OuU1l7Sho$F\" x=\"70\" y=\"-10\"><next><block type=\"iq_drivetrain_set_drive_velocity\" id=\"5p:-CQd@*=ijxH=at)(P\"><field name=\"UNITS\">pct</field><value name=\"VELOCITY\"><shadow type=\"math_number\" id=\"-076Srm$Lr)0PpL`NI6,\"><field name=\"NUM\">100</field></shadow></value><next><block type=\"iq_motion_set_motor_velocity\" id=\"T9`EA94[8hQoCO77mSnz\"><field name=\"MOTOR\">Arm</field><field name=\"UNITS\">pct</field><value name=\"VELOCITY\"><shadow type=\"math_number\" id=\"9Myh_K]+mLZFN6+WZ|r/\"><field name=\"NUM\">100</field></shadow></value><next><block type=\"iq_motion_set_motor_stopping\" id=\"[^jPMY^0xN~=ptYt`1*;\"><field name=\"MOTOR\">Claw</field><field name=\"MODE\">hold</field><next><block type=\"iq_motion_set_motor_stopping\" id=\"d)mbYEiC)*SG9Xji*w2Q\"><field name=\"MOTOR\">Arm</field><field name=\"MODE\">hold</field></block></next></block></next></block></next></block></next></block><block type=\"iq_events_when_controller_button\" id=\"!ja^@XW-!m6(=Tsk]9ZL\" x=\"70\" y=\"370\"><field name=\"BUTTON\">ButtonEUp</field><field name=\"EVENTTYPE\">pressed</field><next><block type=\"iq_sounds_play_sound\" id=\"K!aHp39n{I_#:d;}n2o;\"><field name=\"SOUND\">tada</field></block></next></block></xml>","rconfig":[{"port":[],"name":"Controller","customName":false,"deviceType":"Controller","deviceClass":"controller","setting":{"left":"Claw","leftDir":"false","right":"Arm","rightDir":"false","e":"","eDir":"false","f":"","fDir":"false","l3r3":"","l3r3Dir":"false","drive":"split"},"triportSourcePort":22},{"port":[7,12,0],"name":"Drivetrain","customName":false,"deviceType":"Drivetrain","deviceClass":"smartdrive","setting":{"type":"2-motor","wheelSize":"200mm","gearRatio":"1:1","direction":"fwd","gyroType":"none","width":"173","unit":"mm","wheelbase":"76","wheelbaseUnit":"mm","xOffset":"0","yOffset":"0","thetaOffset":"0"},"triportSourcePort":22},{"port":[11],"name":"Claw","customName":true,"deviceType":"Motor","deviceClass":"motor","setting":{"reversed":"false","fwd":"forward","rev":"reverse"},"triportSourcePort":22},{"port":[10],"name":"Arm","customName":true,"deviceType":"Motor","deviceClass":"motor","setting":{"reversed":"false","fwd":"forward","rev":"reverse"},"triportSourcePort":22}],"slot":0,"platform":"IQ","sdkVersion":"20220726.10.00.00","appVersion":"2.4.4","minVersion":"2.4.0","fileFormat":"1.2.0","icon":"","targetBrainGen":"First","cppStatus":"true","cpp":"// Make sure all required headers are included.\n#include <stdio.h>\n#include <stdlib.h>\n#include <stdbool.h>\n#include <math.h>\n#include <string.h>\n\n\n#include \"vex.h\"\n\nusing namespace vex;\n\n// Brain should be defined by default\nbrain Brain;\n\n\n// START IQ MACROS\n#define waitUntil(condition)                                                   \\\n  do {                                                                         \\\n    wait(5, msec);                                                             \\\n  } while (!(condition))\n\n#define repeat(iterations)                                                     \\\n  for (int iterator = 0; iterator < iterations; iterator++)\n// END IQ MACROS\n\n\n// Robot configuration code.\ncontroller Controller = controller();\nmotor LeftDriveSmart = motor(PORT7, 1, false);\nmotor RightDriveSmart = motor(PORT12, 1, true);\ndrivetrain Drivetrain = drivetrain(LeftDriveSmart, RightDriveSmart, 200, 173, 76, mm, 1);\nmotor Claw = motor(PORT11, false);\nmotor Arm = motor(PORT10, false);\n\n\n\n// Generated code.\n\n\n\n// define variable for remote controller enable/disable\nbool RemoteControlCodeEnabled = true;\n// define variables used for controlling motors based on controller inputs\nbool ControllerLeftShoulderControlMotorsStopped = true;\nbool ControllerRightShoulderControlMotorsStopped = true;\nbool DrivetrainLNeedsToBeStopped_Controller = true;\nbool DrivetrainRNeedsToBeStopped_Controller = true;\n\n// define a task that will handle monitoring inputs from Controller\nint rc_auto_loop_function_Controller() {\n  // process the controller input every 20 milliseconds\n  // update the motors based on the input values\n  while(true) {\n    if(RemoteControlCodeEnabled) {\n      \n      // calculate the drivetrain motor velocities from the controller joystick axies\n      // left = AxisA + AxisC\n      // right = AxisA - AxisC\n      int drivetrainLeftSideSpeed = Controller.AxisA.position() + Controller.AxisC.position();\n      int drivetrainRightSideSpeed = Controller.AxisA.position() - Controller.AxisC.position();\n      \n      // check if the value is inside of the deadband range\n      if (drivetrainLeftSideSpeed < 5 && drivetrainLeftSideSpeed > -5) {\n        // check if the left motor has already been stopped\n        if (DrivetrainLNeedsToBeStopped_Controller) {\n          // stop the left drive motor\n          LeftDriveSmart.stop();\n          // tell the code that the left motor has been stopped\n          DrivetrainLNeedsToBeStopped_Controller = false;\n        }\n      } else {\n        // reset the toggle so that the deadband code knows to stop the left motor nexttime the input is in the deadband range\n        DrivetrainLNeedsToBeStopped_Controller = true;\n      }\n      // check if the value is inside of the deadband range\n      if (drivetrainRightSideSpeed < 5 && drivetrainRightSideSpeed > -5) {\n        // check if the right motor has already been stopped\n        if (DrivetrainRNeedsToBeStopped_Controller) {\n          // stop the right drive motor\n          RightDriveSmart.stop();\n          // tell the code that the right motor has been stopped\n          DrivetrainRNeedsToBeStopped_Controller = false;\n        }\n      } else {\n        // reset the toggle so that the deadband code knows to stop the right motor next time the input is in the deadband range\n        DrivetrainRNeedsToBeStopped_Controller = true;\n      }\n      \n      // only tell the left drive motor to spin if the values are not in the deadband range\n      if (DrivetrainLNeedsToBeStopped_Controller) {\n        LeftDriveSmart.setVelocity(drivetrainLeftSideSpeed, percent);\n        LeftDriveSmart.spin(forward);\n      }\n      // only tell the right drive motor to spin if the values are not in the deadband range\n      if (DrivetrainRNeedsToBeStopped_Controller) {\n        RightDriveSmart.setVelocity(drivetrainRightSideSpeed, percent);\n        RightDriveSmart.spin(forward);\n      }\n      // check the ButtonLUp/ButtonLDown status to control Claw\n      if (Controller.ButtonLUp.pressing()) {\n        Claw.spin(forward);\n        ControllerLeftShoulderControlMotorsStopped = false;\n      } else if (Controller.ButtonLDown.pressing()) {\n        Claw.spin(reverse);\n        ControllerLeftShoulderControlMotorsStopped = false;\n      } else if (!ControllerLeftShoulderControlMotorsStopped) {\n        Claw.stop();\n        // set the toggle so that we don't constantly tell the motor to stop when the buttons are released\n        ControllerLeftShoulderControlMotorsStopped = true;\n      }\n      // check the ButtonRUp/ButtonRDown status to control Arm\n      if (Controller.ButtonRUp.pressing()) {\n        Arm.spin(forward);\n        ControllerRightShoulderControlMotorsStopped = false;\n      } else if (Controller.ButtonRDown.pressing()) {\n        Arm.spin(reverse);\n        ControllerRightShoulderControlMotorsStopped = false;\n      } else if (!ControllerRightShoulderControlMotorsStopped) {\n        Arm.stop();\n        // set the toggle so that we don't constantly tell the motor to stop when the buttons are released\n        ControllerRightShoulderControlMotorsStopped = true;\n      }\n    }\n    // wait before repeating the process\n    wait(20, msec);\n  }\n  return 0;\n}\n\ntask rc_auto_loop_task_Controller(rc_auto_loop_function_Controller);\n\n// Include the IQ Library\n#include \"vex.h\"\n  \n// Allows for easier use of the VEX Library\nusing namespace vex;\n\nfloat myVariable;\n\n// \"when started\" hat block\nint whenStarted1() {\n  Drivetrain.setDriveVelocity(100.0, percent);\n  Arm.setVelocity(100.0, percent);\n  Claw.setStopping(hold);\n  Arm.setStopping(hold);\n  return 0;\n}\n\n// \"when Controller ButtonEUp pressed\" hat block\nvoid onevent_ControllerButtonEUp_pressed_0() {\n  Brain.playSound(tada);\n}\n\n\nint main() {\n  // register event handlers\n  Controller.ButtonEUp.pressed(onevent_ControllerButtonEUp_pressed_0);\n\n  wait(15, msec);\n  whenStarted1();\n}","target":"Physical"}